{"version":3,"file":"static/js/173.8bb1db56.chunk.js","mappings":"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","sources":["components/Imagecard.tsx","components/Paginator.tsx","components/location/Button.tsx","hooks/usePagination.ts","components/location/CardSkeleton.tsx","utils/uniqueStatuses.ts","hooks/useFilter.ts","views/location/Location.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\r\nimport * as React from 'react';\r\nimport \"../assets/css/location/Location.scss\";\r\nimport { ImageCard } from \"../types/types\";\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\ntype Props = {\r\n    data: ImageCard\r\n}\r\nconst statusCircleColor: any = {\r\n    Dead: 'dead-circle',\r\n    Alive: 'alive-circle',\r\n    unknown: 'unknown-circle'\r\n}\r\n\r\nconst ImageCardComponent: React.FC<Props> = ({ data }): ReactElement => {\r\n    const navigate = useNavigate()\r\n    const navigatePage = () => {\r\n        navigate(`/detail?id=${data.id}`)\r\n    }\r\n    return <>\r\n        <div className=\"main-imagecard\" key={data.id}  >\r\n            <div className=\"image\">\r\n                <img src={data.image} alt={data.name} />\r\n            </div>\r\n            <div className=\"imagecard-content\">\r\n                <div className=\"heading\" >\r\n                    <span onClick={navigatePage}> {data.name}</span>\r\n                </div>\r\n                <div className=\"dot-text\">\r\n\r\n                    <div className=\"left-text\">\r\n                        <span className={statusCircleColor[data.status]}></span ><span>{data.status} - {data.species}</span>\r\n                    </div>\r\n                    {data.type && <div className=\"right-text\" >\r\n                        <span>\r\n                            {data.type} - {data.gender}\r\n                        </span>\r\n                    </div>}\r\n\r\n                </div>\r\n                <div className=\"dimension\">\r\n                    <span>{data.type} {data.dimension}</span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default ImageCardComponent;","import * as React from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Stack from '@mui/material/Stack';\r\n\r\ntype Props = {\r\n    count: number,\r\n    onChangeHandler: (event: React.ChangeEvent<unknown>, page: number) => void\r\n}\r\nconst Paginating: React.FC<Props> = ({ count, onChangeHandler }): React.ReactElement => {\r\n    const margin = {\r\n        margin: \"30px\",\r\n        fontWeight: \"bold\",\r\n    }\r\n    return (\r\n        <Stack spacing={2}>\r\n            <Pagination count={count} onChange={onChangeHandler} style={margin} />\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default Paginating","import { ReactElement } from \"react\";\r\nimport * as React from 'react';\r\nimport \"../../assets/css/location/Location.scss\";\r\nimport Button from '@mui/material/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    Alive: {\r\n        backgroundColor: theme.palette.success.light,\r\n    },\r\n    Dead: {\r\n        backgroundColor: theme.palette.error.light,\r\n    },\r\n    unknown: {\r\n        backgroundColor: theme.palette.grey[100],\r\n    },\r\n}));\r\n\r\ntype Props = {\r\n    text: string\r\n    onFilterChangeHandler: (filter: string) => void,\r\n    variant: any\r\n}\r\nconst statusCircleColor: any = {\r\n    Dead: { color: 'error', circle: 'dead-circle', active: 'dead-dark-circle' },\r\n    Alive: { color: 'success', circle: 'alive-circle', active: 'alive-dark-circle' },\r\n    unknown: { color: 'inherit', circle: 'unknown-circle ', active: 'unknown-dark-circle' }\r\n}\r\nconst ButtonComponent: React.FC<Props> = ({ text, onFilterChangeHandler, variant }): ReactElement => {\r\n    const classes: any = useStyles();\r\n    return <>\r\n        <Button onClick={() => onFilterChangeHandler(text)} variant={variant.active ? 'contained' : 'outlined'} color={statusCircleColor[text]?.color} className={`${variant.active ? classes[text] : ''} button`} ><span className={variant.active ? statusCircleColor[text]?.active + ' ' + statusCircleColor[text]?.circle : statusCircleColor[text]?.circle} ></span> <span className={`${'button-content'} ${text === 'unknown' ? 'unknown-button' : ''}`}>{text}</span></Button >\r\n    </>;\r\n};\r\n\r\nexport default ButtonComponent;","import { useEffect, useState } from 'react';\r\nimport { Character } from '../types/types';\r\n\r\ninterface PaginationOptions {\r\n    initialData: Character[];\r\n    pageSize: number;\r\n}\r\n\r\ninterface PaginationResult {\r\n    currentPage: Character[];\r\n    totalPages: number;\r\n    isLoad: boolean;\r\n    isError: boolean;\r\n    goToPage: (pageNumber: number) => void;\r\n}\r\n\r\nconst usePagination = (options: PaginationOptions): PaginationResult => {\r\n    const { initialData, pageSize } = options;\r\n    const [currentPage, setCurrentPage] = useState<Character[]>([]);\r\n    const [isLoad, setIsLoad] = useState<boolean>(false);\r\n    const [isError, setIsError] = useState<boolean>(false);\r\n    const [currentPageNumber, setCurrentPageNumber] = useState<number>(1);\r\n    const totalPages = Math.ceil(initialData.length / options.pageSize);\r\n\r\n\r\n    const goToPage = (pageNumber: number) => {\r\n\r\n        if (pageNumber >= 1 && pageNumber <= totalPages) {\r\n            setCurrentPageNumber(pageNumber);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsLoad(true);\r\n        setIsError(false);\r\n        const startIndex = (currentPageNumber - 1) * pageSize;\r\n        const endIndex = startIndex + pageSize;\r\n        const pageData: any = initialData.slice(startIndex, endIndex);\r\n\r\n        setCurrentPage(pageData);\r\n        setIsLoad(false);\r\n    }, [currentPageNumber, initialData, pageSize]);\r\n    return {\r\n        currentPage,\r\n        totalPages,\r\n        isLoad,\r\n        isError,\r\n        goToPage,\r\n    };\r\n};\r\n\r\nexport default usePagination;\r\n","import React, { ReactElement } from 'react'\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport \"../../assets/css/location/Location.scss\";\r\n\r\n\r\nconst SkeletonLoader: React.FC = (): ReactElement => {\r\n    return (\r\n        <div>\r\n            <div className=\"main-imagecard\">\r\n                <div className=\"image\">\r\n                    <Skeleton variant=\"rectangular\" width={340} height={340} />\r\n                </div>\r\n                <div className=\"imagecard-content\">\r\n                    <div className=\"heading\">\r\n                        <Skeleton width={340} />\r\n                    </div>\r\n                    <div className=\"dot-text\">\r\n                        <span ><Skeleton variant=\"circular\" width={30} height={30} /></span ><span> <Skeleton width={300} /></span>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default SkeletonLoader;","export default function getUniqueStatuses(characters: any[]): string[] {\r\n    const uniqueStatuses: string[] = [];\r\n\r\n    characters.forEach((character) => {\r\n        if (!uniqueStatuses.includes(character.status)) {\r\n            uniqueStatuses.push(character.status);\r\n        }\r\n    });\r\n\r\n    return uniqueStatuses;\r\n}","import { useState, useEffect } from 'react';\r\nimport { Character } from '../types/types';\r\n\r\nconst useFilteredData = (data: Character[], filter: string): Character[] => {\r\n\r\n\r\n    const [filteredData, setFilteredData] = useState<Character[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!filter)\r\n            return setFilteredData(data);\r\n        const filteredCharacters = data.filter(\r\n            (character) => character.status.toLowerCase() === filter.toLowerCase()\r\n        );\r\n        setFilteredData(filteredCharacters);\r\n    }, [data, filter]);\r\n    return filteredData;\r\n};\r\n\r\nexport default useFilteredData;\r\n","import React, { ReactElement, useState } from \"react\";\r\nimport { useGetSpecificLocationQuery } from \"../../store/services/locations\"\r\nimport \"../../assets/css/home/App.scss\"\r\nimport \"../../assets/css/location/Location.scss\"\r\nimport ButtonComponent from \"../../components/location/Button\"\r\nimport ImageCardComponent from \"../../components/Imagecard\"\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport usePagination from \"../../hooks/usePagination\";\r\nimport SkeletonLoader from \"../../components/location/CardSkeleton\"\r\nimport getUniqueStatuses from \"../../utils/uniqueStatuses\";\r\nimport Paginating from \"../../components/Paginator\";\r\nimport useStatusFilter from \"../../hooks/useFilter\";\r\nimport { Character, ImageCard } from \"../../types/types\";\r\nconst pageSize = 20;\r\n\r\n\r\nconst LocationContainer: React.FC = (): ReactElement => {\r\n    const [searchParams] = useSearchParams()\r\n    const [filter, setFilter] = useState('')\r\n    const [activeBtn, setActiveBtn] = React.useState<any>({\r\n        Dead: {\r\n            class: 'dead-active',\r\n            active: false\r\n        },\r\n        Alive: {\r\n            class: 'live-active',\r\n            active: false\r\n\r\n        },\r\n        unknown: {\r\n            class: 'unknown-active',\r\n            active: false\r\n        }\r\n    })\r\n\r\n    //call the endpoint\r\n    const {\r\n        data = [],\r\n        isLoading,\r\n    } = useGetSpecificLocationQuery(searchParams.get('id'))\r\n\r\n    //call the filter hook\r\n    const filteredData = useStatusFilter(data, filter);\r\n    //call for the pagination\r\n    const {\r\n        currentPage,\r\n        totalPages,\r\n        isLoad,\r\n        goToPage,\r\n    } = usePagination({\r\n        initialData: filteredData,\r\n        pageSize: pageSize,\r\n    });\r\n    //onFilter Change\r\n    const onFilterChange = (filter: string): void => {\r\n        setFilter(filter)\r\n        let status = activeBtn;\r\n        const updatedStatus: any = {\r\n            Dead: { ...status.Dead, active: false },\r\n            Alive: { ...status.Alive, active: false },\r\n            unknown: { ...status.unknown, active: false }\r\n        };\r\n        updatedStatus[filter].active = true;\r\n        setActiveBtn(updatedStatus)\r\n    }\r\n    const makeDataFormat = (data: Character[]): ImageCard[] => {\r\n        return data.map(e => ({\r\n            id: e.id,\r\n            image: e.image,\r\n            name: e.name,\r\n            status: e.status,\r\n            species: e.status,\r\n            gender: '',\r\n            dimension: '',\r\n            type: '',\r\n            location_url: e.location.url\r\n\r\n        }))\r\n    }\r\n    return <>\r\n        <div className=\"location-main\">\r\n            {(isLoad || isLoading) ? <div className=\" location-cards\">\r\n                {new Array(pageSize).fill(0).map((e, i) => (\r\n                    <SkeletonLoader key={i} />\r\n                ))}\r\n            </div> : <div>\r\n                <div>\r\n                    <div className=\"location-text\">Filter by Status:</div>\r\n                    <div className=\"location-buttons\">\r\n                        {getUniqueStatuses(data)?.map(e => (<ButtonComponent variant={activeBtn[e]} text={e} onFilterChangeHandler={onFilterChange} key={e} />))}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"location-cards\">\r\n                    {makeDataFormat(currentPage).map((row: ImageCard) => (<ImageCardComponent data={row} key={row.id} />))}\r\n\r\n                </div></div>}\r\n            <div className=\"location-pagination\">\r\n                <Paginating\r\n                    count={totalPages}\r\n                    onChangeHandler={(\r\n                        event: React.ChangeEvent<unknown>,\r\n                        page: number\r\n                    ): void => goToPage(page)}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    </>;\r\n};\r\n\r\nexport default LocationContainer;\r\n//Design Location based characters page"],"names":["statusCircleColor","Dead","Alive","unknown","_ref","data","navigate","useNavigate","_jsx","_Fragment","children","_jsxs","className","src","image","alt","name","onClick","concat","id","status","species","type","gender","dimension","count","onChangeHandler","Stack","spacing","Pagination","onChange","style","margin","fontWeight","useStyles","makeStyles","theme","backgroundColor","palette","success","light","error","grey","color","circle","active","_statusCircleColor$te","_statusCircleColor$te2","_statusCircleColor$te3","_statusCircleColor$te4","text","onFilterChangeHandler","variant","classes","Button","options","initialData","pageSize","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","isLoad","setIsLoad","_useState5","_useState6","isError","setIsError","_useState7","_useState8","currentPageNumber","setCurrentPageNumber","totalPages","Math","ceil","length","useEffect","startIndex","endIndex","pageData","slice","goToPage","pageNumber","Skeleton","width","height","getUniqueStatuses","characters","uniqueStatuses","forEach","character","includes","push","filter","filteredData","setFilteredData","filteredCharacters","toLowerCase","_getUniqueStatuses","_useSearchParams","useSearchParams","searchParams","setFilter","_React$useState","React","class","_React$useState2","activeBtn","setActiveBtn","_useGetSpecificLocati","useGetSpecificLocationQuery","get","_useGetSpecificLocati2","isLoading","useStatusFilter","_usePagination","usePagination","onFilterChange","updatedStatus","_objectSpread","Array","fill","map","e","i","SkeletonLoader","ButtonComponent","location_url","location","url","makeDataFormat","row","ImageCardComponent","Paginating","event","page"],"sourceRoot":""}